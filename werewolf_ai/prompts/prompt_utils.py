from .system_templates import SYSTEM_PROMPTS
from collections import Counter

def build_prompt(agent, action, game_state):
    # Bloc de rappel des r√®gles (toujours pr√©sent)
    regles = (
        "üßæ R√®gles du jeu ‚Äì Loup-Garou (rappel)\n"
        "\nLe jeu alterne entre nuit et jour.\n"
        "\t‚Ä¢\tüåô La nuit, certains r√¥les agissent en secret :\n"
        "\t‚Ä¢\tLes loups-garous votent (s√©par√©ment) pour √©liminer un joueur.\n"
        "\t‚Ä¢\tLa voyante peut inspecter le r√¥le d‚Äôun joueur.\n"
        "\t‚Ä¢\tüåû Le jour, tous les joueurs discutent puis votent pour √©liminer un suspect.\n"
        "\t‚Ä¢\tLe jeu continue jusqu‚Äô√† ce que :\n"
        "\t‚Ä¢\tTous les loups soient morts ‚Üí les villageois gagnent\n"
        "\t‚Ä¢\tLes loups soient en nombre √©gal ou sup√©rieur aux autres ‚Üí les loups gagnent\n"
        "\nüïµÔ∏è Ton r√¥le est secret. Tu dois d√©fendre ton camp sans te faire d√©masquer.\n"
        "\n‚∏ª\n"
    )
    # Calcul de la composition actuelle (vivants)
    roles = [a.role for a in game_state.agents if a.status == "alive"]
    counts = Counter(roles)
    role_labels = {
        "Werewolf": "loup-garou",
        "Villager": "villageois",
        "Seer": "voyante"
    }
    compo = []
    for role, label in role_labels.items():
        n = counts.get(role, 0)
        if n > 0:
            compo.append(f"{n} {label}{'s' if n > 1 and label != 'voyante' else ''}")
    compo_str = "Composition actuelle : " + ", ".join(compo) + ".\n"
    # 1. Prompt syst√®me
    base = SYSTEM_PROMPTS.get(agent.role, "")
    prompt = regles + compo_str + base + "\n"

    # 2. Rappel des r√®gles (optionnel)
    if game_state.turn <= 2:
        prompt += "Rappel des r√®gles : Discussion > Vote > Nuit. Le but de ton r√¥le est d√©crit ci-dessus.\n"

    # 3. √âtat du jeu
    prompt += f"Tour actuel : {game_state.turn}\n"
    prompt += f"Joueurs encore en vie : {', '.join([f'{a.agent_id} - {a.name}' for a in game_state.agents if a.status == 'alive'])}\n"

    # 4. Morts pr√©c√©dents (on prend les messages du channel 'public' qui annoncent les morts)
    morts_logs = [msg for msg in game_state.logs.get("public", []) if "a √©t√© tu√©" in msg or "a √©t√© √©limin√©" in msg]
    if morts_logs:
        prompt += "Morts pr√©c√©dents :\n\t‚Ä¢ " + "\n\t‚Ä¢ ".join(morts_logs[-3:]) + "\n"
    else:
        prompt += "Aucun mort pour l'instant.\n"

    # 5. M√©moire personnelle de l'agent
    mem = agent.memory.get_recent(3)
    if mem:
        prompt += "M√©moire :\n\t‚Ä¢ " + "\n\t‚Ä¢ ".join(mem) + "\n"
    else:
        prompt += "M√©moire : (aucun √©v√©nement marquant)\n"

    # 6. Historique des discussions accessibles (channels)
    # Tout le monde a acc√®s √† 'public'
    # Les loups √† 'wolves', la voyante √† 'seer'
    discussions = []
    discussions += game_state.logs.get("public", [])[-3:]
    if agent.role == "Werewolf":
        discussions += game_state.logs.get("wolves", [])[-3:]
    if agent.role == "Seer":
        discussions += game_state.logs.get("seer", [])[-3:]
    # On retire les doublons tout en gardant l'ordre
    seen = set()
    discussions_unique = []
    for msg in discussions:
        if msg not in seen:
            discussions_unique.append(msg)
            seen.add(msg)
    if discussions_unique:
        prompt += "Discussions accessibles :\n\t‚Ä¢ " + "\n\t‚Ä¢ ".join(discussions_unique[-3:]) + "\n"
    else:
        prompt += "Discussions accessibles : (aucune discussion r√©cente)\n"

    # 7. Instruction/action √† ex√©cuter
    if action == "talk":
        prompt += "R√©pond aux derniers messages, de fa√ßon naturelle comme dans une discussion. Attention ce que tu dis est publique. Parle dans le but de d√©fendre ton r√¥le et de convaincre les autres joueurs. Sois tr√®s concis."
    elif action == "vote":
        prompt += "Vote pour √©liminer un joueur encore vivant du village. Attention ce vote est publique. Agis dans l'int√©r√™t de ton camp et dans ton int√©r√™t. R√©ponds uniquement par celui que tu veux √©liminer : ID - NOM - RAISON"
    elif action == "spy":
        prompt += "Choisis un joueur dont tu souhaites connaitre le r√¥le (que tu ne connais pas d√©j√†) pour aider les villageois √† d√©masquer les loups."
    elif action == "vote_to_kill":
        prompt += "Choisis une victime √† √©liminer dans l'int√©r√™t des loups."
    else:
        prompt += "Agis selon l'action demand√©e."
    return prompt
