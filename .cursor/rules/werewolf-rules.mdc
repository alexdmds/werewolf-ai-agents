---
alwaysApply: true
description: >
  Règle complète pour la simulation Loup-Garou : rôles, ordre d’action,
  et diffusion d’information via les channels de WerewolfGame
  (public, wolves, master, seer:<id>, etc.).
---

# 🐺 Règle – Comportement des Loups-Garous (v2)

## 1. Rôles en présence
| Rôle       | Pouvoir de nuit                            | Objectif | Channel(s) abonné(s) |
|------------|--------------------------------------------|----------|-----------------------|
| **Villager** | aucun                                     | Survivre & éliminer tous les loups | `public`, `master` |
| **Seer**      | inspecter **un** joueur *(role reveal)* | Aider le village | `public`, `master`, `seer:<id>` |
| **Werewolf**  | voter deux fois pour tuer un joueur      | Tuer jusqu’à ≥ villageois | `public`, `master`, `wolves` |

---

## 2. Initialisation mémoire
- Chaque loup connaît les autres loups :  
  *ex.* « Tu sais que les autres loups sont : Paul, Julie ».  
  Ajouté dans le `system_prompt` **et** dans sa mémoire (`MemoryManager.add`).

---

## 3. Ordre d’action de la **nuit**

| Étape | Acteur | Implémentation                             | Channels utilisés |
|-------|--------|--------------------------------------------|-------------------|
| 1️⃣ | Voyante | `seer.spy(game)` renvoie `target_id`        | `master`, `seer:<seer_id>` |
| 2️⃣ | Loups – **tour 1** | chacun : `wolf.vote_to_kill(game)` | `master` |
| 3️⃣ | Diffusion tour 1 | event : « Premier vote loups : … »   | `wolves`, `master` |
| 4️⃣ | Loups – **tour 2** | à nouveau `wolf.vote_to_kill(game)` | `wolves`, `master` |
| 5️⃣ | Diffusion tour 2 | event : « Deuxième vote loups : … »  | `wolves`, `master` |
| 6️⃣ | Résolution | majorité absolue ⇒ victime                | `wolves` (+ `public`) + `master` |

> **Rappel prompt loup (tour 2)**  
> « Voici le récapitulatif du 1ᵉʳ tour : …  
> Tu ne dois jamais voter pour un autre loup.  
> Renvoie uniquement l’ID de la cible. »

---

## 4. Diffusion d’information (record_event)

| Exemple d’événement                                    | Channels passés à `record_event` |
|--------------------------------------------------------|----------------------------------|
| Voyante voit Luc → `Wolf`                              | `["master", "seer:<seer_id>"]`   |
| Paul (loup) vote Luc (tour 1)                          | `["master"]`                     |
| Récap premier vote                                     | `["wolves", "master"]`           |
| Victime de la nuit (Luc)                               | `["wolves", "master", "public"]` |
| Début de journée : « Luc a été tué »                   | `["public", "master"]`           |

*`WerewolfGame.record_event` écrit dans `logs/<channel>.txt`
et pousse le message dans la mémoire de tout agent abonné au channel.*

---

## 5. Résolution des votes loups
1. Compter les cibles du **tour 2**.  
2. **Majorité absolue** (> ⎣nb_loups / 2⎦) ⇒ victime tuée.  
3. Sinon ⇒ « Pas de victime ».  
4. Un event « Votes des loups : … / Résultat : … » est envoyé sur `wolves`, `master`.

---

## 6. Résumé pour le prompt loup
> « Tu es loup-garou. Tes alliés : Paul, Julie.  
> Nuit : tu votes deux fois (tour 1, tour 2) pour tuer un **non-loup**.  
> Après le tour 1, tu connais les votes des autres loups.  
> Majorité absolue = victime, sinon personne.  
> Ne vote **jamais** un loup. »

---

## 7. Condition de victoire
- **Village** gagne si **plus aucun loup vivant**.  
- **Loups** gagnent si **0 villageois vivants**.

*(Les channels supplémentaires — `lovers`, `witch`, etc. — se rajouteront
simplement en abonnant les agents concernés.)*